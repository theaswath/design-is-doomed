{"remainingRequest":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\src\\views\\Cards Against Design.vue?vue&type=template&id=1ca66458&scoped=true&","dependencies":[{"path":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\src\\views\\Cards Against Design.vue","mtime":1605636558963},{"path":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"W:\\Assingnments\\Year 4\\Thesis 1\\Design Is Doomed\\design-is-doomed\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}